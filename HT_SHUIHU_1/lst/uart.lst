C51 COMPILER V9.56.0.0   UART                                                              07/13/2020 09:42:19 PAGE 1   


C51 COMPILER V9.56.0.0, COMPILATION OF MODULE UART
OBJECT MODULE PLACED IN .\output\uart.obj
COMPILER INVOKED BY: F:\Keil\C51\BIN\C51.EXE source\uart.c OMF2 OPTIMIZE(8,SPEED) BROWSE DEBUG PRINT(.\lst\uart.lst) TAB
                    -S(2) OBJECT(.\output\uart.obj)

line level    source

   1          #ifndef _UART_C_
   2          #define _UART_C_
   3          #include "include/ca51f_config.h"
   4          #include "include/ca51f3sfr.h"
   5          #include "include/ca51f3xsfr.h"
   6          #include "include/gpiodef_f3.h"
   7          
   8          #include "include/uart.h"
   9          #include <intrins.h>
  10          #include <string.h>
  11          #include <stdarg.h>
  12          #include <stdlib.h>
  13          #include <stdio.h>
  14          #include <absacc.h>
  15          /*********************************************************************************************************
             -************/
  16          /*********************************************************************************************************
             -************/
  17          #ifdef UART0_EN
              void Uart0_Initial(unsigned long int baudrate)
              {
                unsigned int value_temp;
              
                P31F = P31_UART0_RX_SETTING;
                P30F = P30_UART0_TX_SETTING;
                
                uart0_send.head=0;
                uart0_send.tail=0;
                uart0_rev.head=0;
                uart0_rev.tail=0;
                uart0_tx_flag=0;
              
              /*********************************************************************************************************
             -***************/
              //TIMER2作为UART0的波特率发生器
                value_temp = 0x10000 - FOSC/(baudrate*32);
                T2CON =   0x24;
                T2CH  =   (unsigned char)(value_temp>>8);
                T2CL  =   (unsigned char)(value_temp);
                TH2   =   (unsigned char)(value_temp>>8);
                TL2   =   (unsigned char)(value_temp);; 
                TR2   =   1;
              /*********************************************************************************************************
             -***************/  
              
              
              /*********************************************************************************************************
             -***************/
              //TIMER1作为UART0的波特率发生器
              
              //  TMOD = (TMOD&0xCF)|0x20;
              //  TH1 = 0xff;   //19200
              //  TL1 = 0xff;
              //  ET1=0;
C51 COMPILER V9.56.0.0   UART                                                              07/13/2020 09:42:19 PAGE 2   

              //  TR1=1;    
              //  PCON |= 0x80;   
              /*********************************************************************************************************
             -***************/
              
              
                S0CON = 0x50;  
                ES0 = 1;
              }
              void Uart0_PutChar(unsigned char bdat)
              {
                unsigned char free_space;
                unsigned char tail_tmp;
                while(1)
                {       
                  tail_tmp = uart0_send.tail; 
                  if(uart0_send.head < tail_tmp)
                  {
                    free_space = tail_tmp - uart0_send.head;
                  }
                  else
                  {
                    free_space = UART0_TX_BUF_SIZE + tail_tmp - uart0_send.head;
                  }   
                  if(free_space > 1)
                  {
                    ES0 = 0; 
                    uart0_send.head++;
                    uart0_send.head %= UART0_TX_BUF_SIZE;
                    uart0_tx_buf[uart0_send.head] = bdat;     
                    if(!uart0_tx_flag)
                    {
                      ES0 = 1;        
                      uart0_send.tail++;
                      uart0_send.tail %= UART0_TX_BUF_SIZE;   
                      S0BUF=uart0_tx_buf[uart0_send.tail];        
                      uart0_tx_flag = 1;    
                    }
                    else
                    {
                      ES0 = 1;  
                    }     
                    break;
                  }
                }
              }
              void UART0_ISR (void) interrupt 4
              { 
                if(RI0)
                {
                  RI0 = 0;
                  uart0_rev.head++;
                  uart0_rev.head %= UART0_RX_BUF_SIZE;
                  uart0_rx_buf[uart0_rev.head]=S0BUF;
                }
                if(TI0)
                { 
                  TI0 = 0;    
                  if(uart0_send.head!=uart0_send.tail)
                  {
                    uart0_send.tail++;
                    uart0_send.tail %= UART0_TX_BUF_SIZE;
C51 COMPILER V9.56.0.0   UART                                                              07/13/2020 09:42:19 PAGE 3   

                    S0BUF=uart0_tx_buf[uart0_send.tail];        
                  }
                  else
                  {
                    uart0_tx_flag=0;
                  } 
                }
              }
              #endif
 120          #ifdef UART1_EN
 121          void Uart1_Initial(unsigned long int baudrate)
 122          {
 123   1        unsigned int value_temp;
 124   1      
 125   1        uart1_send.head=0;
 126   1        uart1_send.tail=0;
 127   1        uart1_rev.head=0;
 128   1        uart1_rev.tail=0;
 129   1        uart1_tx_flag=0;
 130   1      
 131   1        value_temp = 0x400 - FOSC/(baudrate*32);
 132   1      
 133   1      
 134   1        P12F = P12_UART1_RX_SETTING;
 135   1        P11F = P11_UART1_TX_SETTING;
 136   1      
 137   1      
 138   1        S1RELH = (unsigned char)(value_temp>>8);
 139   1        S1RELL = (unsigned char)(value_temp);
 140   1        
 141   1        S1CON = 0xD0;
 142   1        ES1 = 1;  
 143   1      }
 144          void Uart1_PutChar(unsigned char bdat)
 145          {
 146   1        unsigned char free_space;
 147   1        unsigned char tail_tmp;
 148   1        while(1)
 149   1        {   
 150   2          tail_tmp = uart1_send.tail;
 151   2          if(uart1_send.head < tail_tmp)
 152   2          {
 153   3            free_space = tail_tmp - uart1_send.head;
 154   3          }
 155   2          else
 156   2          {
 157   3            free_space = UART1_TX_BUF_SIZE + tail_tmp - uart1_send.head;
 158   3          }   
 159   2          if(free_space > 1)
 160   2          {
 161   3            ES1 = 0; 
 162   3            uart1_send.head++;
 163   3            uart1_send.head %= UART1_TX_BUF_SIZE;
 164   3            uart1_tx_buf[uart1_send.head] = bdat;
 165   3            if(!uart1_tx_flag)
 166   3            {
 167   4              ES1 = 1;
 168   4              uart1_send.tail++;
 169   4              uart1_send.tail %= UART1_TX_BUF_SIZE;   
 170   4              S1BUF = uart1_tx_buf[uart1_send.tail];        
 171   4              uart1_tx_flag = 1;    
 172   4            }
C51 COMPILER V9.56.0.0   UART                                                              07/13/2020 09:42:19 PAGE 4   

 173   3            else
 174   3            {
 175   4              ES1 = 1;  
 176   4            }     
 177   3            break;
 178   3          }
 179   2        }
 180   1      }
 181          void UART1_ISR (void) interrupt 6 
 182          {
 183   1        if(S1CON & 0x01)
 184   1        {
 185   2          S1CON = (S1CON&0xFC)|0x01;       
 186   2          uart1_rev.head++;
 187   2          uart1_rev.head %= UART1_RX_BUF_SIZE;
 188   2          uart1_rx_buf[uart1_rev.head]=S1BUF;
 189   2        }
 190   1        if(S1CON & 0x02)
 191   1        {
 192   2          S1CON = (S1CON&0xFC)|0x02;      
 193   2          if(uart1_send.head!=uart1_send.tail)
 194   2          {
 195   3            uart1_send.tail++;
 196   3            uart1_send.tail %= UART1_TX_BUF_SIZE;
 197   3            S1BUF=uart1_tx_buf[uart1_send.tail];        
 198   3          }
 199   2          else
 200   2          {
 201   3            uart1_tx_flag=0;
 202   3          }   
 203   2        }
 204   1      }
 205          #endif
 206          
 207          #ifdef PRINT_EN
 208            #ifdef UART0_PRINT
                  #define Uart_PutChar  Uart0_PutChar
                #elif defined  UART1_PRINT
 211              #define Uart_PutChar  Uart1_PutChar
 212            #endif
 213          void UartPutStr(char *str)
 214          {
 215   1        while(*str)
 216   1        { 
 217   2          Uart_PutChar(*str++);
 218   2        }
 219   1      }
 220          void uart_printf(char *fmt,...) 
 221          {
 222   1          va_list ap;
 223   1          char xdata string[256];
 224   1          va_start(ap,fmt);
 225   1          vsprintf(string,fmt,ap);
 226   1          UartPutStr(string);
 227   1          va_end(ap);
 228   1      }
 229          #endif
 230          /*********************************************************************************************************
             -************/
 231          #endif


C51 COMPILER V9.56.0.0   UART                                                              07/13/2020 09:42:19 PAGE 5   

MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    413    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =    124     256
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----      28
   IDATA SIZE       =   ----    ----
   BIT SIZE         =      1    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
